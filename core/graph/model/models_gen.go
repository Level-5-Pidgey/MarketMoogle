// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package schema

import (
	"fmt"
	"io"
	"strconv"
)

type CraftingLeve struct {
	LeveID    int         `json:"LeveId"`
	GilReward int         `json:"GilReward"`
	ExpReward int         `json:"ExpReward"`
	QuestName string      `json:"QuestName"`
	LevelReq  int         `json:"LevelReq"`
	JobReq    CrafterType `json:"JobReq"`
}

type Job struct {
	ID    string `json:"Id"`
	JobID int    `json:"JobId"`
	Level int    `json:"Level"`
}

type JobInput struct {
	JobID int `json:"JobId"`
	Level int `json:"Level"`
}

type MarketEntry struct {
	ServerID     int     `json:"ServerId"`
	Server       string  `json:"Server"`
	Quantity     int     `json:"Quantity"`
	TotalPrice   int     `json:"TotalPrice"`
	PricePer     int     `json:"PricePer"`
	Hq           bool    `json:"Hq"`
	IsCrafted    bool    `json:"IsCrafted"`
	RetainerName *string `json:"RetainerName"`
}

type MarketHistory struct {
	ServerID        int    `json:"ServerId"`
	Server          string `json:"Server"`
	Quantity        int    `json:"Quantity"`
	TotalPrice      int    `json:"TotalPrice"`
	PricePer        int    `json:"PricePer"`
	Hq              bool   `json:"Hq"`
	TransactionTime string `json:"TransactionTime"`
}

type Recipe struct {
	RecipeID               int               `json:"RecipeId"`
	ItemResultID           int               `json:"ItemResultId"`
	ResultQuantity         int               `json:"ResultQuantity"`
	CraftedBy              CrafterType       `json:"CraftedBy"`
	RecipeLevel            *int              `json:"RecipeLevel"`
	MasteryStars           *int              `json:"MasteryStars"`
	RecipeItems            []*RecipeContents `json:"RecipeItems"`
	SuggestedControl       *int              `json:"SuggestedControl"`
	SuggestedCraftsmanship *int              `json:"SuggestedCraftsmanship"`
	Durability             *int              `json:"Durability"`
}

type RecipePurchaseInfo struct {
	Item            *Item  `json:"Item"`
	ServerToBuyFrom string `json:"ServerToBuyFrom"`
	BuyFromVendor   bool   `json:"BuyFromVendor"`
	ItemCost        int    `json:"ItemCost"`
}

type RecipeResaleInfo struct {
	ResaleInfo *ResaleInfo `json:"ResaleInfo"`
	CraftLevel int         `json:"CraftLevel"`
	CraftType  CrafterType `json:"CraftType"`
}

type ResaleInfo struct {
	Profit          int                   `json:"Profit"`
	ItemID          int                   `json:"ItemId"`
	Quantity        int                   `json:"Quantity"`
	SingleCost      int                   `json:"SingleCost"`
	TotalCost       int                   `json:"TotalCost"`
	ItemsToPurchase []*RecipePurchaseInfo `json:"ItemsToPurchase"`
}

type User struct {
	ID              int     `json:"Id"`
	LodestoneID     *int    `json:"LodestoneId"`
	Jobs            []*Job  `json:"Jobs"`
	DataCenter      *string `json:"DataCenter"`
	Server          *string `json:"Server"`
	PortraitAddress *string `json:"PortraitAddress"`
	IsPremium       *bool   `json:"IsPremium"`
}

type UserInput struct {
	LodestoneID     *int        `json:"LodestoneId"`
	Jobs            []*JobInput `json:"Jobs"`
	DataCenter      *string     `json:"DataCenter"`
	Server          *string     `json:"Server"`
	PortraitAddress *string     `json:"PortraitAddress"`
	IsPremium       *bool       `json:"IsPremium"`
}

type CrafterType string

const (
	CrafterTypeCarpenter     CrafterType = "CARPENTER"
	CrafterTypeBlacksmith    CrafterType = "BLACKSMITH"
	CrafterTypeArmourer      CrafterType = "ARMOURER"
	CrafterTypeGoldsmith     CrafterType = "GOLDSMITH"
	CrafterTypeLeatherworker CrafterType = "LEATHERWORKER"
	CrafterTypeWeaver        CrafterType = "WEAVER"
	CrafterTypeAlchemist     CrafterType = "ALCHEMIST"
	CrafterTypeCulinarian    CrafterType = "CULINARIAN"
)

var AllCrafterType = []CrafterType{
	CrafterTypeCarpenter,
	CrafterTypeBlacksmith,
	CrafterTypeArmourer,
	CrafterTypeGoldsmith,
	CrafterTypeLeatherworker,
	CrafterTypeWeaver,
	CrafterTypeAlchemist,
	CrafterTypeCulinarian,
}

func (e CrafterType) IsValid() bool {
	switch e {
	case CrafterTypeCarpenter, CrafterTypeBlacksmith, CrafterTypeArmourer, CrafterTypeGoldsmith, CrafterTypeLeatherworker, CrafterTypeWeaver, CrafterTypeAlchemist, CrafterTypeCulinarian:
		return true
	}
	return false
}

func (e CrafterType) String() string {
	return string(e)
}

func (e *CrafterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CrafterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CrafterType", str)
	}
	return nil
}

func (e CrafterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
